name: Emulator Testing

on:
  workflow_dispatch:
    inputs:
      api_level:
        description: 'Android API Level'
        required: true
        default: '34'
        type: choice
        options:
          - '21'
          - '24'
          - '28'
          - '29'
          - '30'
          - '31'
          - '33'
          - '34'
      test_type:
        description: 'Test Type'
        required: true
        default: 'all'
        type: choice
        options:
          - 'unit'
          - 'instrumentation'
          - 'ui'
          - 'performance'
          - 'all'
      device_profile:
        description: 'Device Profile'
        required: false
        default: 'Nexus 6'
        type: choice
        options:
          - 'Nexus 6'
          - 'pixel_2'
          - 'pixel_4'
          - 'pixel_6'
      target:
        description: 'System Image Target'
        required: false
        default: 'google_apis'
        type: choice
        options:
          - 'default'
          - 'google_apis'
          - 'google_apis_playstore'

concurrency:
  group: ${{ github.workflow }}-${{ github.event.inputs.api_level }}-${{ github.event.inputs.test_type }}
  cancel-in-progress: true

env:
  GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2

jobs:
  emulator-test:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v3
        with:
          gradle-version: wrapper

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Enable KVM group permissions
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      - name: AVD cache
        uses: actions/cache@v4
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-emulator-${{ github.event.inputs.api_level }}-${{ github.event.inputs.target }}-${{ github.event.inputs.device_profile }}

      - name: Create AVD and generate snapshot for caching
        if: steps.avd-cache.outputs.cache-hit != 'true'
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ github.event.inputs.api_level }}
          target: ${{ github.event.inputs.target }}
          arch: x86_64
          profile: ${{ github.event.inputs.device_profile }}
          force-avd-creation: false
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none -camera-front none -qemu -m 2048
          disable-animations: false
          script: echo "Generated AVD snapshot for caching."

      - name: Run emulator tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ github.event.inputs.api_level }}
          target: ${{ github.event.inputs.target }}
          arch: x86_64
          profile: ${{ github.event.inputs.device_profile }}
          force-avd-creation: false
          emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none -camera-front none -qemu -m 2048
          disable-animations: true
          enable-hw-keyboard: true
          script: |
            echo "🚀 Starting emulator tests..."
            echo "API Level: ${{ github.event.inputs.api_level }}"
            echo "Target: ${{ github.event.inputs.target }}"
            echo "Device Profile: ${{ github.event.inputs.device_profile }}"
            echo "Test Type: ${{ github.event.inputs.test_type }}"
            
            # Wait for emulator to be ready
            adb wait-for-device
            adb devices
            
            # Disable animations for better test stability
            adb shell settings put global window_animation_scale 0
            adb shell settings put global transition_animation_scale 0
            adb shell settings put global animator_duration_scale 0
            
            # Enable developer options and USB debugging
            adb shell settings put global development_settings_enabled 1
            adb shell settings put global adb_enabled 1
            
            # Get device info
            echo "📱 Device Information:"
            adb shell getprop ro.build.version.release
            adb shell getprop ro.product.model
            adb shell getprop ro.build.version.sdk
            
            # Create test results directory
            mkdir -p test-results
            
            # Run tests based on input
            case "${{ github.event.inputs.test_type }}" in
              "unit")
                echo "🧪 Running unit tests..."
                ./gradlew testDebugUnitTest --stacktrace --continue
                echo "unit_tests=completed" >> test-results/status.txt
                ;;
              "instrumentation")
                echo "🔧 Running instrumentation tests..."
                ./gradlew connectedDebugAndroidTest --stacktrace --continue
                echo "instrumentation_tests=completed" >> test-results/status.txt
                ;;
              "ui")
                echo "🖱️ Running UI tests..."
                ./gradlew connectedDebugAndroidTest -Pandroid.testInstrumentationRunnerArguments.class=androidx.test.ext.junit.runners.AndroidJUnit4 --stacktrace --continue
                echo "ui_tests=completed" >> test-results/status.txt
                ;;
              "performance")
                echo "⚡ Running performance tests..."
                # Install the app first
                ./gradlew installDebug --stacktrace
                
                # Get package name
                PACKAGE_NAME=$(aapt dump badging app/build/outputs/apk/debug/app-debug.apk | grep package | awk '{print $2}' | sed "s/name='//" | sed "s/'//")
                echo "Package name: $PACKAGE_NAME"
                
                # Run performance measurements
                echo "Measuring app startup time..."
                for i in {1..3}; do
                  adb shell am force-stop $PACKAGE_NAME
                  sleep 2
                  adb shell am start-activity -W -n $PACKAGE_NAME/.MainActivity >> test-results/startup_times.txt
                  sleep 3
                done
                
                # Memory usage
                echo "Measuring memory usage..."
                sleep 5
                adb shell dumpsys meminfo $PACKAGE_NAME > test-results/memory_usage.txt
                
                # Frame stats
                echo "Measuring frame rate..."
                adb shell dumpsys gfxinfo $PACKAGE_NAME > test-results/frame_stats.txt
                
                echo "performance_tests=completed" >> test-results/status.txt
                ;;
              "all"|*)
                echo "🎯 Running all tests..."
                
                # Unit tests
                echo "Running unit tests..."
                ./gradlew testDebugUnitTest --stacktrace --continue
                
                # Instrumentation tests
                echo "Running instrumentation tests..."
                ./gradlew connectedDebugAndroidTest --stacktrace --continue
                
                # Basic performance check
                echo "Running basic performance check..."
                ./gradlew installDebug --stacktrace
                PACKAGE_NAME=$(aapt dump badging app/build/outputs/apk/debug/app-debug.apk | grep package | awk '{print $2}' | sed "s/name='//" | sed "s/'//")
                adb shell am start-activity -W -n $PACKAGE_NAME/.MainActivity >> test-results/startup_time.txt
                sleep 3
                adb shell dumpsys meminfo $PACKAGE_NAME > test-results/memory_usage.txt
                
                echo "all_tests=completed" >> test-results/status.txt
                ;;
            esac
            
            echo "✅ Emulator tests completed!"

      - name: Generate test summary
        if: always()
        run: |
          mkdir -p test-reports
          
          echo "# 🧪 Emulator Test Results" > test-reports/emulator-test-summary.md
          echo "" >> test-reports/emulator-test-summary.md
          echo "## Test Configuration" >> test-reports/emulator-test-summary.md
          echo "- **API Level**: ${{ github.event.inputs.api_level }}" >> test-reports/emulator-test-summary.md
          echo "- **Target**: ${{ github.event.inputs.target }}" >> test-reports/emulator-test-summary.md
          echo "- **Device Profile**: ${{ github.event.inputs.device_profile }}" >> test-reports/emulator-test-summary.md
          echo "- **Test Type**: ${{ github.event.inputs.test_type }}" >> test-reports/emulator-test-summary.md
          echo "" >> test-reports/emulator-test-summary.md
          
          # Check test results
          if [ -f "test-results/status.txt" ]; then
            echo "## Test Execution Status" >> test-reports/emulator-test-summary.md
            echo '```' >> test-reports/emulator-test-summary.md
            cat test-results/status.txt >> test-reports/emulator-test-summary.md
            echo '```' >> test-reports/emulator-test-summary.md
            echo "" >> test-reports/emulator-test-summary.md
          fi
          
          # Unit test results
          if [ -d "app/build/test-results/testDebugUnitTest" ]; then
            echo "## Unit Test Results" >> test-reports/emulator-test-summary.md
            total_tests=$(find app/build/test-results/testDebugUnitTest -name "*.xml" -exec grep -h "tests=" {} \; | sed 's/.*tests="\([0-9]*\)".*/\1/' | awk '{sum+=$1} END {print sum}')
            failed_tests=$(find app/build/test-results/testDebugUnitTest -name "*.xml" -exec grep -h "failures=" {} \; | sed 's/.*failures="\([0-9]*\)".*/\1/' | awk '{sum+=$1} END {print sum}')
            echo "- Total: ${total_tests:-0}" >> test-reports/emulator-test-summary.md
            echo "- Failed: ${failed_tests:-0}" >> test-reports/emulator-test-summary.md
            echo "" >> test-reports/emulator-test-summary.md
          fi
          
          # Instrumentation test results
          if [ -d "app/build/outputs/androidTest-results" ]; then
            echo "## Instrumentation Test Results" >> test-reports/emulator-test-summary.md
            total_tests=$(find app/build/outputs/androidTest-results -name "*.xml" -exec grep -h "tests=" {} \; | sed 's/.*tests="\([0-9]*\)".*/\1/' | awk '{sum+=$1} END {print sum}')
            failed_tests=$(find app/build/outputs/androidTest-results -name "*.xml" -exec grep -h "failures=" {} \; | sed 's/.*failures="\([0-9]*\)".*/\1/' | awk '{sum+=$1} END {print sum}')
            echo "- Total: ${total_tests:-0}" >> test-reports/emulator-test-summary.md
            echo "- Failed: ${failed_tests:-0}" >> test-reports/emulator-test-summary.md
            echo "" >> test-reports/emulator-test-summary.md
          fi
          
          # Performance results
          if [ -f "test-results/startup_times.txt" ] || [ -f "test-results/startup_time.txt" ]; then
            echo "## Performance Results" >> test-reports/emulator-test-summary.md
            
            if [ -f "test-results/startup_times.txt" ]; then
              echo "### Startup Times" >> test-reports/emulator-test-summary.md
              echo '```' >> test-reports/emulator-test-summary.md
              grep "TotalTime" test-results/startup_times.txt >> test-reports/emulator-test-summary.md
              echo '```' >> test-reports/emulator-test-summary.md
            fi
            
            if [ -f "test-results/memory_usage.txt" ]; then
              echo "### Memory Usage" >> test-reports/emulator-test-summary.md
              echo '```' >> test-reports/emulator-test-summary.md
              grep -A 5 "App Summary" test-results/memory_usage.txt >> test-reports/emulator-test-summary.md
              echo '```' >> test-reports/emulator-test-summary.md
            fi
            
            echo "" >> test-reports/emulator-test-summary.md
          fi
          
          echo "## 📊 Artifacts" >> test-reports/emulator-test-summary.md
          echo "Detailed test reports and logs are available in the workflow artifacts." >> test-reports/emulator-test-summary.md

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: emulator-test-results-api-${{ github.event.inputs.api_level }}-${{ github.event.inputs.test_type }}-${{ github.run_id }}
          path: |
            app/build/reports/
            app/build/test-results/
            app/build/outputs/androidTest-results/
            test-results/
            test-reports/
          retention-days: 30

      - name: Publish test results
        if: always()
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          files: |
            app/build/test-results/**/*.xml
            app/build/outputs/androidTest-results/**/*.xml
          check_name: "Emulator Test Results (API ${{ github.event.inputs.api_level }})"
          comment_mode: create new

      - name: Create test summary issue
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const title = `🚨 Emulator Test Failure - API ${{ github.event.inputs.api_level }}`;
            const body = `# Emulator Test Failure Report
            
            **Configuration:**
            - API Level: ${{ github.event.inputs.api_level }}
            - Target: ${{ github.event.inputs.target }}
            - Device Profile: ${{ github.event.inputs.device_profile }}
            - Test Type: ${{ github.event.inputs.test_type }}
            
            **Workflow Run:** [#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            
            **Next Steps:**
            1. Review the workflow logs for detailed error information
            2. Check the uploaded test artifacts for specific test failures
            3. Consider running tests locally with the same configuration
            4. Update tests or fix issues as needed
            
            This issue was automatically created by the emulator testing workflow.`;
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['bug', 'testing', 'emulator', 'automated']
            });

  test-matrix:
    runs-on: ubuntu-latest
    if: github.event.inputs.test_type == 'all' && github.event.inputs.api_level == '34'
    timeout-minutes: 90
    strategy:
      fail-fast: false
      matrix:
        api-level: [24, 29, 33, 34]
        test-type: ['unit', 'instrumentation']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v3
        with:
          gradle-version: wrapper
          cache-read-only: true

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Enable KVM group permissions
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      - name: AVD cache
        uses: actions/cache@v4
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-matrix-${{ matrix.api-level }}

      - name: Create AVD and generate snapshot for caching
        if: steps.avd-cache.outputs.cache-hit != 'true'
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          arch: x86_64
          profile: Nexus 6
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: false
          script: echo "Generated AVD snapshot for caching."

      - name: Run matrix tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          arch: x86_64
          profile: Nexus 6
          emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: true
          script: |
            case "${{ matrix.test-type }}" in
              "unit")
                ./gradlew testDebugUnitTest --stacktrace --continue
                ;;
              "instrumentation")
                ./gradlew connectedDebugAndroidTest --stacktrace --continue
                ;;
            esac

      - name: Upload matrix test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: matrix-test-results-api-${{ matrix.api-level }}-${{ matrix.test-type }}-${{ github.run_id }}
          path: |
            app/build/reports/
            app/build/test-results/
            app/build/outputs/androidTest-results/
          retention-days: 7