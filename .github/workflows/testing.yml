name: Comprehensive Testing Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 6 * * *'  # Daily at 6 AM UTC
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2 -Dorg.gradle.parallel=true

jobs:
  unit-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v3
        with:
          gradle-version: wrapper
          cache-read-only: ${{ github.ref != 'refs/heads/main' }}

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Run unit tests with coverage
        run: |
          ./gradlew testDebugUnitTest jacocoTestReport --stacktrace --continue

      - name: Generate test summary
        if: always()
        run: |
          mkdir -p test-reports
          
          echo "# Unit Test Results" > test-reports/unit-test-summary.md
          echo "" >> test-reports/unit-test-summary.md
          
          # Count test results
          if [ -d "app/build/test-results/testDebugUnitTest" ]; then
            total_tests=$(find app/build/test-results/testDebugUnitTest -name "*.xml" -exec grep -h "tests=" {} \; | sed 's/.*tests="\([0-9]*\)".*/\1/' | awk '{sum+=$1} END {print sum}')
            failed_tests=$(find app/build/test-results/testDebugUnitTest -name "*.xml" -exec grep -h "failures=" {} \; | sed 's/.*failures="\([0-9]*\)".*/\1/' | awk '{sum+=$1} END {print sum}')
            skipped_tests=$(find app/build/test-results/testDebugUnitTest -name "*.xml" -exec grep -h "skipped=" {} \; | sed 's/.*skipped="\([0-9]*\)".*/\1/' | awk '{sum+=$1} END {print sum}')
            
            passed_tests=$((total_tests - failed_tests - skipped_tests))
            
            echo "## Test Statistics" >> test-reports/unit-test-summary.md
            echo "| Metric | Count |" >> test-reports/unit-test-summary.md
            echo "|--------|-------|" >> test-reports/unit-test-summary.md
            echo "| Total Tests | ${total_tests:-0} |" >> test-reports/unit-test-summary.md
            echo "| Passed | ${passed_tests:-0} |" >> test-reports/unit-test-summary.md
            echo "| Failed | ${failed_tests:-0} |" >> test-reports/unit-test-summary.md
            echo "| Skipped | ${skipped_tests:-0} |" >> test-reports/unit-test-summary.md
            
            if [ "${failed_tests:-0}" -gt 0 ]; then
              echo "" >> test-reports/unit-test-summary.md
              echo "❌ **Some unit tests failed. Please check the detailed reports.**" >> test-reports/unit-test-summary.md
            else
              echo "" >> test-reports/unit-test-summary.md
              echo "✅ **All unit tests passed successfully!**" >> test-reports/unit-test-summary.md
            fi
          else
            echo "No unit test results found" >> test-reports/unit-test-summary.md
          fi
          
          # Coverage information
          if [ -f "app/build/reports/jacoco/jacocoTestReport/html/index.html" ]; then
            coverage=$(grep -o 'Total[^%]*%' app/build/reports/jacoco/jacocoTestReport/html/index.html | head -1 | grep -o '[0-9]*%' || echo "N/A")
            echo "" >> test-reports/unit-test-summary.md
            echo "## Code Coverage" >> test-reports/unit-test-summary.md
            echo "**Total Coverage: ${coverage}**" >> test-reports/unit-test-summary.md
          fi

      - name: Upload unit test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-results-${{ github.run_id }}
          path: |
            app/build/reports/tests/
            app/build/test-results/
            app/build/reports/jacoco/
            test-reports/
          retention-days: 30

      - name: Publish unit test results
        if: always()
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          files: app/build/test-results/**/*.xml
          check_name: "Unit Test Results"
          comment_mode: create new
          compare_to_earlier_commit: true

  instrumentation-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    strategy:
      fail-fast: false
      matrix:
        api-level: [24, 29, 33, 34]
        arch: [x86_64]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v3
        with:
          gradle-version: wrapper
          cache-read-only: true

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Enable KVM group perms
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      - name: AVD cache
        uses: actions/cache@v4
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-testing-${{ matrix.api-level }}-${{ matrix.arch }}

      - name: Create AVD and generate snapshot for caching
        if: steps.avd-cache.outputs.cache-hit != 'true'
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          arch: ${{ matrix.arch }}
          profile: Nexus 6
          force-avd-creation: false
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: false
          script: echo "Generated AVD snapshot for caching."

      - name: Run instrumentation tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          arch: ${{ matrix.arch }}
          profile: Nexus 6
          force-avd-creation: false
          emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: true
          script: |
            ./gradlew connectedDebugAndroidTest jacocoAndroidTestReport --stacktrace --continue

      - name: Generate instrumentation test summary
        if: always()
        run: |
          mkdir -p test-reports
          
          echo "# Instrumentation Test Results (API ${{ matrix.api-level }})" > test-reports/instrumentation-test-summary-api-${{ matrix.api-level }}.md
          echo "" >> test-reports/instrumentation-test-summary-api-${{ matrix.api-level }}.md
          
          # Count test results
          if [ -d "app/build/outputs/androidTest-results" ]; then
            total_tests=$(find app/build/outputs/androidTest-results -name "*.xml" -exec grep -h "tests=" {} \; | sed 's/.*tests="\([0-9]*\)".*/\1/' | awk '{sum+=$1} END {print sum}')
            failed_tests=$(find app/build/outputs/androidTest-results -name "*.xml" -exec grep -h "failures=" {} \; | sed 's/.*failures="\([0-9]*\)".*/\1/' | awk '{sum+=$1} END {print sum}')
            error_tests=$(find app/build/outputs/androidTest-results -name "*.xml" -exec grep -h "errors=" {} \; | sed 's/.*errors="\([0-9]*\)".*/\1/' | awk '{sum+=$1} END {print sum}')
            skipped_tests=$(find app/build/outputs/androidTest-results -name "*.xml" -exec grep -h "skipped=" {} \; | sed 's/.*skipped="\([0-9]*\)".*/\1/' | awk '{sum+=$1} END {print sum}')
            
            passed_tests=$((total_tests - failed_tests - error_tests - skipped_tests))
            
            echo "## Test Statistics" >> test-reports/instrumentation-test-summary-api-${{ matrix.api-level }}.md
            echo "| Metric | Count |" >> test-reports/instrumentation-test-summary-api-${{ matrix.api-level }}.md
            echo "|--------|-------|" >> test-reports/instrumentation-test-summary-api-${{ matrix.api-level }}.md
            echo "| Total Tests | ${total_tests:-0} |" >> test-reports/instrumentation-test-summary-api-${{ matrix.api-level }}.md
            echo "| Passed | ${passed_tests:-0} |" >> test-reports/instrumentation-test-summary-api-${{ matrix.api-level }}.md
            echo "| Failed | ${failed_tests:-0} |" >> test-reports/instrumentation-test-summary-api-${{ matrix.api-level }}.md
            echo "| Errors | ${error_tests:-0} |" >> test-reports/instrumentation-test-summary-api-${{ matrix.api-level }}.md
            echo "| Skipped | ${skipped_tests:-0} |" >> test-reports/instrumentation-test-summary-api-${{ matrix.api-level }}.md
            
            if [ "${failed_tests:-0}" -gt 0 ] || [ "${error_tests:-0}" -gt 0 ]; then
              echo "" >> test-reports/instrumentation-test-summary-api-${{ matrix.api-level }}.md
              echo "❌ **Some instrumentation tests failed. Please check the detailed reports.**" >> test-reports/instrumentation-test-summary-api-${{ matrix.api-level }}.md
            else
              echo "" >> test-reports/instrumentation-test-summary-api-${{ matrix.api-level }}.md
              echo "✅ **All instrumentation tests passed successfully!**" >> test-reports/instrumentation-test-summary-api-${{ matrix.api-level }}.md
            fi
          else
            echo "No instrumentation test results found" >> test-reports/instrumentation-test-summary-api-${{ matrix.api-level }}.md
          fi

      - name: Upload instrumentation test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: instrumentation-test-results-api-${{ matrix.api-level }}-${{ github.run_id }}
          path: |
            app/build/reports/androidTests/
            app/build/outputs/androidTest-results/
            app/build/reports/jacoco/jacocoAndroidTestReport/
            test-reports/
          retention-days: 30

      - name: Publish instrumentation test results
        if: always()
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          files: app/build/outputs/androidTest-results/**/*.xml
          check_name: "Instrumentation Test Results (API ${{ matrix.api-level }})"
          comment_mode: create new

  ui-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: github.event_name != 'schedule'  # Skip UI tests on scheduled runs
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v3
        with:
          gradle-version: wrapper
          cache-read-only: true

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Enable KVM group perms
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      - name: AVD cache
        uses: actions/cache@v4
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-ui-tests-29

      - name: Create AVD and generate snapshot for caching
        if: steps.avd-cache.outputs.cache-hit != 'true'
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 29
          arch: x86_64
          profile: Nexus 6
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: false
          script: echo "Generated AVD snapshot for caching."

      - name: Run UI tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 29
          arch: x86_64
          profile: Nexus 6
          emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: true
          script: |
            # Run UI tests with Espresso
            ./gradlew connectedDebugAndroidTest -Pandroid.testInstrumentationRunnerArguments.class=androidx.test.ext.junit.runners.AndroidJUnit4 --stacktrace

      - name: Upload UI test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ui-test-results-${{ github.run_id }}
          path: |
            app/build/reports/androidTests/
            app/build/outputs/androidTest-results/
          retention-days: 30

  integration-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 25
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v3
        with:
          gradle-version: wrapper
          cache-read-only: true

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Run integration tests
        run: |
          # Run integration tests (if they exist)
          ./gradlew testDebugUnitTest -Dtest.profile=integration --stacktrace --continue || true

      - name: Generate integration test report
        run: |
          mkdir -p test-reports
          echo "# Integration Test Results" > test-reports/integration-test-summary.md
          echo "" >> test-reports/integration-test-summary.md
          echo "Integration tests completed. Check artifacts for detailed results." >> test-reports/integration-test-summary.md

      - name: Upload integration test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-results-${{ github.run_id }}
          path: |
            app/build/reports/tests/
            test-reports/
          retention-days: 30

  test-summary:
    runs-on: ubuntu-latest
    needs: [unit-tests, instrumentation-tests, ui-tests, integration-tests]
    if: always()
    timeout-minutes: 10
    
    steps:
      - name: Download all test artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-test-results
          pattern: "*test-results*"

      - name: Generate comprehensive test report
        run: |
          echo "# 🧪 Comprehensive Test Summary" > test-summary.md
          echo "" >> test-summary.md
          echo "## Test Suite Results" >> test-summary.md
          echo "| Test Suite | Status |" >> test-summary.md
          echo "|------------|--------|" >> test-summary.md
          echo "| Unit Tests | ${{ needs.unit-tests.result }} |" >> test-summary.md
          echo "| Instrumentation Tests | ${{ needs.instrumentation-tests.result }} |" >> test-summary.md
          echo "| UI Tests | ${{ needs.ui-tests.result }} |" >> test-summary.md
          echo "| Integration Tests | ${{ needs.integration-tests.result }} |" >> test-summary.md
          echo "" >> test-summary.md
          
          # Overall status
          if [[ "${{ needs.unit-tests.result }}" == "success" && 
                "${{ needs.instrumentation-tests.result }}" == "success" && 
                ("${{ needs.ui-tests.result }}" == "success" || "${{ needs.ui-tests.result }}" == "skipped") && 
                ("${{ needs.integration-tests.result }}" == "success" || "${{ needs.integration-tests.result }}" == "skipped") ]]; then
            echo "## ✅ Overall Status: PASSED" >> test-summary.md
            echo "" >> test-summary.md
            echo "All critical test suites have passed successfully!" >> test-summary.md
          else
            echo "## ❌ Overall Status: FAILED" >> test-summary.md
            echo "" >> test-summary.md
            echo "One or more test suites have failed. Please review the individual test reports." >> test-summary.md
          fi
          
          echo "" >> test-summary.md
          echo "## 📊 Test Artifacts" >> test-summary.md
          echo "Detailed test reports and coverage information are available in the workflow artifacts:" >> test-summary.md
          echo "" >> test-summary.md
          
          # List available artifacts
          find all-test-results -name "*.md" -type f | while read file; do
            echo "- $(basename "$file")" >> test-summary.md
          done
          
          echo "" >> test-summary.md
          echo "## 🔍 Next Steps" >> test-summary.md
          if [[ "${{ needs.unit-tests.result }}" != "success" || 
                "${{ needs.instrumentation-tests.result }}" != "success" ]]; then
            echo "1. Review failed test cases in the detailed reports" >> test-summary.md
            echo "2. Fix failing tests before merging" >> test-summary.md
            echo "3. Consider adding more test coverage for new features" >> test-summary.md
          else
            echo "1. All tests are passing - great work! 🎉" >> test-summary.md
            echo "2. Consider adding more test coverage for new features" >> test-summary.md
            echo "3. Review code coverage reports for improvement opportunities" >> test-summary.md
          fi

      - name: Upload comprehensive test summary
        uses: actions/upload-artifact@v4
        with:
          name: comprehensive-test-summary-${{ github.run_id }}
          path: |
            test-summary.md
            all-test-results/
          retention-days: 30

      - name: Comment test summary on PR
        if: github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          path: test-summary.md
          header: test-summary

      - name: Set workflow status
        run: |
          if [[ "${{ needs.unit-tests.result }}" != "success" || 
                "${{ needs.instrumentation-tests.result }}" != "success" ]]; then
            echo "::error::Critical tests failed"
            exit 1
          else
            echo "::notice::All critical tests passed"
          fi