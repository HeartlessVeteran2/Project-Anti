name: Auto Assign and Fix

on:
  issues:
    types: [opened, reopened]
  pull_request:
    types: [opened, reopened, ready_for_review]
  workflow_dispatch:  # Allow manual triggering

jobs:
  assign-issues:
    runs-on: ubuntu-latest
    steps:
      - name: Auto Assign Issues
        uses: pozil/auto-assign-issue@v1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          assignees: tokenblkguy
          numOfAssignee: 1
          allowSelfAssign: true

  assign-prs:
    runs-on: ubuntu-latest
    steps:
      - name: Auto Assign PR
        uses: pozil/auto-assign-issue@v1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          assignees: tokenblkguy
          numOfAssignee: 1
          allowSelfAssign: true

  auto-fix:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # Fix common code style issues
      - name: Run ktlint with auto-fix
        if: ${{ !contains(github.event.pull_request.labels.*.name, 'no-auto-fix') }}
        run: |
          curl -sSLO https://github.com/pinterest/ktlint/releases/download/0.48.2/ktlint
          chmod +x ktlint
          ./ktlint --android "app/src/**/*.kt" -F

      # Fix Android Lint issues that can be auto-fixed
      - name: Run Android Lint with auto-fix
        if: ${{ !contains(github.event.pull_request.labels.*.name, 'no-auto-fix') }}
        run: ./gradlew lintFix

      # Update dependencies to latest versions
      - name: Update Gradle dependencies
        if: ${{ !contains(github.event.pull_request.labels.*.name, 'no-dependency-updates') }}
        run: |
          ./gradlew dependencyUpdates -Drevision=release
          # Parse the report to get outdated dependencies
          if [ -f "build/dependencyUpdates/report.txt" ]; then
            echo "Outdated dependencies found. Updating build.gradle files..."
            # This is a simplistic approach - in a real implementation, you'd parse the report
            # and update the versions in build.gradle files programmatically
            
            # Example (simplified): update androidx libraries to latest stable versions
            find . -name "build.gradle" -exec sed -i 's/androidx\.appcompat:appcompat:[0-9.]\+/androidx.appcompat:appcompat:1.6.1/g' {} \;
            find . -name "build.gradle" -exec sed -i 's/androidx\.core:core-ktx:[0-9.]\+/androidx.core:core-ktx:1.12.0/g' {} \;
            find . -name "build.gradle" -exec sed -i 's/androidx\.constraintlayout:constraintlayout:[0-9.]\+/androidx.constraintlayout:constraintlayout:2.1.4/g' {} \;
          fi

      # Auto-fix import statements
      - name: Organize imports
        if: ${{ !contains(github.event.pull_request.labels.*.name, 'no-auto-fix') }}
        run: |
          find app/src -name "*.java" -o -name "*.kt" | while read file; do
            # Sort imports
            if [[ "$file" == *.java ]]; then
              # For Java files
              sed -i '/^import /!b;:a;N;/^\(import \)/!bb;s/\n\(import \)/\n\1/;ta;:b;s/\n\n/\n/;tb' "$file"
              # Sort imports alphabetically
              sed -i '/^import /!b;:a;N;/^import [^;]*$/!bb;s/\(.*\)\n\(import .*\)/\2\n\1/;ta;:b' "$file"
            elif [[ "$file" == *.kt ]]; then
              # For Kotlin files
              sed -i '/^import /!b;:a;N;/^\(import \)/!bb;s/\n\(import \)/\n\1/;ta;:b;s/\n\n/\n/;tb' "$file"
              # Sort imports alphabetically
              sed -i '/^import /!b;:a;N;/^import [^;]*$/!bb;s/\(.*\)\n\(import .*\)/\2\n\1/;ta;:b' "$file"
            fi
          done

      # Auto-fix String formatting in XML files
      - name: Fix XML string resources
        if: ${{ !contains(github.event.pull_request.labels.*.name, 'no-auto-fix') }}
        run: |
          find app/src/main/res/values -name "*.xml" | while read file; do
            # Replace straight quotes with curly quotes in string resources
            sed -i 's/<string name="\([^"]*\)">\([^<]*\)">\([^<]*\)<\/string>/<string name="\1">\2">\3<\/string>/g' "$file"
            sed -i 's/<string name="\([^"]*\)">\([^<]*\)">\([^<]*\)<\/string>/<string name="\1">\2">\3<\/string>/g' "$file"
            
            # Ensure proper apostrophes
            sed -i "s/<string name=\"\([^\"]*\)\">\([^<]*\)'>\([^<]*\)<\/string>/<string name=\"\1\">\2'>\3<\/string>/g" "$file"
          done

      # Fix indentation and whitespace issues
      - name: Fix indentation and whitespace
        if: ${{ !contains(github.event.pull_request.labels.*.name, 'no-auto-fix') }}
        run: |
          find app/src -name "*.java" -o -name "*.kt" -o -name "*.xml" | while read file; do
            # Remove trailing whitespace
            sed -i 's/[ \t]*$//' "$file"
            
            # Ensure files end with a newline
            if [ "$(tail -c 1 "$file" | wc -l)" -eq 0 ]; then
              echo "" >> "$file"
            fi
          done

      # Commit changes if any were made
      - name: Check for changes
        id: git-check
        run: |
          if [[ -n "$(git status --porcelain)" ]]; then
            echo "::set-output name=changes::true"
          else
            echo "::set-output name=changes::false"
          fi

      - name: Commit and push auto-fixes
        if: steps.git-check.outputs.changes == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          git commit -m "Auto-fix code style and formatting issues"
          git push

      - name: Add auto-fixed label
        if: steps.git-check.outputs.changes == 'true'
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['auto-fixed']
            })

      - name: Comment on PR
        if: steps.git-check.outputs.changes == 'true'
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'ðŸ¤– I\'ve automatically fixed some code style, formatting, and dependency issues in this pull request. The changes have been committed to your branch.\n\nTo disable auto-fixing in future pull requests, add the `no-auto-fix` label.'
            })
