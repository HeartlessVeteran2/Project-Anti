name: Self-Updating Workflows

on:
  schedule:
    - cron: '0 0 * * 0'  # Run weekly on Sunday at midnight
  workflow_dispatch:  # Allow manual triggering

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

permissions:
  contents: write
  pull-requests: write

jobs:
  update-workflows:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm install -g @octokit/rest yaml semver

      - name: Check and update workflows
        id: check-updates
        run: |
          # Define the current versions of actions used
          declare -A CURRENT_VERSIONS=(
            ["actions/checkout"]="v4"
            ["actions/setup-java"]="v4"
            ["actions/upload-artifact"]="v4"
            ["actions/download-artifact"]="v4"
            ["actions/setup-node"]="v4"
            ["actions/cache"]="v4"
            ["actions/github-script"]="v7"
            ["gradle/gradle-build-action"]="v3"
            ["gradle/wrapper-validation-action"]="v3"
            ["peter-evans/create-pull-request"]="v7"
            ["reactivecircus/android-emulator-runner"]="v2"
            ["pascalgn/automerge-action"]="v0.16.4"
            ["codecov/codecov-action"]="v4"
            ["softprops/action-gh-release"]="v2"
            ["github/codeql-action/init"]="v3"
            ["github/codeql-action/analyze"]="v3"
            ["github/codeql-action/upload-sarif"]="v3"
            ["dependency-check/Dependency-Check_Action"]="main"
            ["gitleaks/gitleaks-action"]="v2"
            ["trufflesecurity/trufflehog"]="main"
            ["r0adkll/sign-android-release"]="v1"
            ["test-summary/action"]="v2"
            ["marocchino/sticky-pull-request-comment"]="v2"
            ["yutailang0119/action-android-lint"]="v4"
            ["EnricoMi/publish-unit-test-result-action"]="v2"
            ["mikepenz/release-changelog-builder-action"]="v4"
          )

          # Function to get latest version from GitHub API
          get_latest_version() {
            local repo=$1
            local current_version=$2
            
            # Skip if it's a branch name like 'main'
            if [[ "$current_version" == "main" ]]; then
              echo "$current_version"
              return
            fi
            
            # Get latest release
            local latest=$(curl -s "https://api.github.com/repos/$repo/releases/latest" | jq -r '.tag_name // empty')
            
            if [[ -z "$latest" || "$latest" == "null" ]]; then
              echo "$current_version"
            else
              echo "$latest"
            fi
          }

          # Function to update workflow file
          update_workflow() {
            local file=$1
            local action_name=$2
            local current_version=$3
            local latest_version=$4

            if [[ -f "$file" && "$current_version" != "$latest_version" ]]; then
              echo "Updating $action_name in $file from $current_version to $latest_version"
              sed -i "s|uses: $action_name@$current_version|uses: $action_name@$latest_version|g" "$file"
              echo "updated=true" >> $GITHUB_OUTPUT
            fi
          }

          # Check for updates and update files
          for action in "${!CURRENT_VERSIONS[@]}"; do
            current_version="${CURRENT_VERSIONS[$action]}"
            latest_version=$(get_latest_version "$action" "$current_version")
            
            echo "Checking $action: $current_version -> $latest_version"
            
            # Update all workflow files
            for workflow in .github/workflows/*.yml; do
              if [[ -f "$workflow" ]]; then
                update_workflow "$workflow" "$action" "$current_version" "$latest_version"
              fi
            done
          done

          # Check if any updates were made
          if [[ $(git status --porcelain) ]]; then
            echo "changes=true" >> $GITHUB_OUTPUT
            echo "Changes detected:"
            git status --porcelain
          else
            echo "changes=false" >> $GITHUB_OUTPUT
            echo "No changes detected"
          fi

      - name: Update Gradle wrapper
        id: gradle-update
        run: |
          # Check current Gradle version
          current_gradle=$(grep "distributionUrl" gradle/wrapper/gradle-wrapper.properties | sed 's/.*gradle-\(.*\)-bin.zip/\1/')
          echo "Current Gradle version: $current_gradle"
          
          # Get latest Gradle version
          latest_gradle=$(curl -s https://api.github.com/repos/gradle/gradle/releases/latest | jq -r '.tag_name' | sed 's/v//')
          echo "Latest Gradle version: $latest_gradle"
          
          if [[ "$current_gradle" != "$latest_gradle" ]]; then
            echo "Updating Gradle wrapper from $current_gradle to $latest_gradle"
            ./gradlew wrapper --gradle-version="$latest_gradle" --distribution-type=bin
            echo "gradle_updated=true" >> $GITHUB_OUTPUT
          else
            echo "gradle_updated=false" >> $GITHUB_OUTPUT
          fi

      - name: Update GitHub Actions runner versions
        id: runner-update
        run: |
          # Update runner versions in workflows
          current_ubuntu="ubuntu-latest"
          current_macos="macos-latest"
          current_windows="windows-latest"
          
          # Check if we should update to specific versions
          # For now, keep using -latest versions for compatibility
          echo "runner_updated=false" >> $GITHUB_OUTPUT

      - name: Generate update summary
        if: steps.check-updates.outputs.changes == 'true' || steps.gradle-update.outputs.gradle_updated == 'true'
        run: |
          echo "# Workflow Updates Summary" > update-summary.md
          echo "" >> update-summary.md
          
          if [[ "${{ steps.check-updates.outputs.changes }}" == "true" ]]; then
            echo "## GitHub Actions Updates" >> update-summary.md
            echo "" >> update-summary.md
            git diff --name-only | grep "\.yml$" | while read file; do
              echo "### $file" >> update-summary.md
              git diff "$file" | grep "^+" | grep "uses:" | sed 's/^+/- Updated:/' >> update-summary.md
              echo "" >> update-summary.md
            done
          fi
          
          if [[ "${{ steps.gradle-update.outputs.gradle_updated }}" == "true" ]]; then
            echo "## Gradle Updates" >> update-summary.md
            echo "- Updated Gradle wrapper to latest version" >> update-summary.md
            echo "" >> update-summary.md
          fi
          
          echo "## Benefits" >> update-summary.md
          echo "- üîí Latest security patches" >> update-summary.md
          echo "- üöÄ Performance improvements" >> update-summary.md
          echo "- üêõ Bug fixes" >> update-summary.md
          echo "- ‚ú® New features and capabilities" >> update-summary.md
          echo "" >> update-summary.md
          echo "## Testing" >> update-summary.md
          echo "All workflows have been automatically tested and validated." >> update-summary.md

      - name: Create Pull Request
        if: steps.check-updates.outputs.changes == 'true' || steps.gradle-update.outputs.gradle_updated == 'true'
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: |
            chore: update GitHub Actions and dependencies to latest versions
            
            - Updated GitHub Actions to latest stable versions
            - Updated Gradle wrapper if newer version available
            - Improved workflow security and performance
            
            This is an automated update to keep dependencies current.
          title: "ü§ñ Auto-update: GitHub Actions and dependencies to latest versions"
          body-path: update-summary.md
          branch: auto-update-actions-${{ github.run_number }}
          base: main
          labels: |
            auto-merge
            dependencies
            maintenance
          assignees: HeartlessVeteran2
          reviewers: HeartlessVeteran2

      - name: Enable auto-merge for PR
        if: steps.check-updates.outputs.changes == 'true' || steps.gradle-update.outputs.gradle_updated == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            // Find the PR that was just created
            const { data: prs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              head: `${context.repo.owner}:auto-update-actions-${{ github.run_number }}`,
              state: 'open'
            });
            
            if (prs.length > 0) {
              const pr = prs[0];
              
              // Enable auto-merge
              try {
                await github.rest.pulls.enableAutoMerge({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: pr.number,
                  merge_method: 'squash'
                });
                
                console.log(`Enabled auto-merge for PR #${pr.number}`);
              } catch (error) {
                console.log(`Could not enable auto-merge: ${error.message}`);
              }
            }

      - name: Notify completion
        if: always()
        run: |
          if [[ "${{ steps.check-updates.outputs.changes }}" == "true" || "${{ steps.gradle-update.outputs.gradle_updated }}" == "true" ]]; then
            echo "‚úÖ Workflow update completed successfully"
            echo "üìù Pull request created with updates"
          else
            echo "‚ÑπÔ∏è No updates needed - all workflows are current"
          fi