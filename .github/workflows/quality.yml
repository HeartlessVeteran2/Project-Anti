name: Quality Assurance

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * 1'  # Weekly Monday 2 AM UTC
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  security-events: write
  actions: read
  pull-requests: write

env:
  GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2

jobs:
  code-quality-analysis:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v3
        with:
          gradle-version: wrapper
          cache-read-only: ${{ github.ref != 'refs/heads/main' }}

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Run Android Lint
        run: |
          ./gradlew lintDebug --stacktrace --continue

      - name: Run ktlint
        run: |
          ./gradlew ktlintCheck --stacktrace --continue

      - name: Run Detekt
        run: |
          ./gradlew detekt --stacktrace --continue

      - name: Run Spotless check
        run: |
          ./gradlew spotlessCheck --stacktrace --continue || true

      - name: Generate quality report
        if: always()
        run: |
          mkdir -p quality-reports
          
          echo "# 📊 Code Quality Report" > quality-reports/quality-summary.md
          echo "" >> quality-reports/quality-summary.md
          
          # Android Lint results
          echo "## Android Lint" >> quality-reports/quality-summary.md
          if [ -f "app/build/reports/lint-results-debug.xml" ]; then
            error_count=$(grep -o 'severity="Error"' app/build/reports/lint-results-debug.xml | wc -l)
            warning_count=$(grep -o 'severity="Warning"' app/build/reports/lint-results-debug.xml | wc -l)
            info_count=$(grep -o 'severity="Informational"' app/build/reports/lint-results-debug.xml | wc -l)
            
            echo "- **Errors**: $error_count" >> quality-reports/quality-summary.md
            echo "- **Warnings**: $warning_count" >> quality-reports/quality-summary.md
            echo "- **Info**: $info_count" >> quality-reports/quality-summary.md
            
            if [ "$error_count" -gt 0 ]; then
              echo "- ❌ **Status**: Failed (has errors)" >> quality-reports/quality-summary.md
            elif [ "$warning_count" -gt 10 ]; then
              echo "- ⚠️ **Status**: Warning (many warnings)" >> quality-reports/quality-summary.md
            else
              echo "- ✅ **Status**: Passed" >> quality-reports/quality-summary.md
            fi
          else
            echo "- ❓ **Status**: No results found" >> quality-reports/quality-summary.md
          fi
          echo "" >> quality-reports/quality-summary.md
          
          # ktlint results
          echo "## Kotlin Lint (ktlint)" >> quality-reports/quality-summary.md
          if [ -f "app/build/reports/ktlint/ktlintMainSourceSetCheck/ktlintMainSourceSetCheck.txt" ]; then
            ktlint_issues=$(wc -l < app/build/reports/ktlint/ktlintMainSourceSetCheck/ktlintMainSourceSetCheck.txt)
            echo "- **Issues**: $ktlint_issues" >> quality-reports/quality-summary.md
            
            if [ "$ktlint_issues" -gt 0 ]; then
              echo "- ❌ **Status**: Failed" >> quality-reports/quality-summary.md
            else
              echo "- ✅ **Status**: Passed" >> quality-reports/quality-summary.md
            fi
          else
            echo "- ✅ **Status**: Passed (no issues file generated)" >> quality-reports/quality-summary.md
          fi
          echo "" >> quality-reports/quality-summary.md
          
          # Detekt results
          echo "## Detekt" >> quality-reports/quality-summary.md
          if [ -f "app/build/reports/detekt/detekt.xml" ]; then
            detekt_issues=$(grep -c '<error' app/build/reports/detekt/detekt.xml || echo "0")
            echo "- **Issues**: $detekt_issues" >> quality-reports/quality-summary.md
            
            if [ "$detekt_issues" -gt 0 ]; then
              echo "- ❌ **Status**: Failed" >> quality-reports/quality-summary.md
            else
              echo "- ✅ **Status**: Passed" >> quality-reports/quality-summary.md
            fi
          else
            echo "- ✅ **Status**: Passed (no issues found)" >> quality-reports/quality-summary.md
          fi
          echo "" >> quality-reports/quality-summary.md
          
          echo "## 📋 Detailed Reports" >> quality-reports/quality-summary.md
          echo "Check the uploaded artifacts for detailed analysis reports." >> quality-reports/quality-summary.md

      - name: Upload quality analysis results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: code-quality-reports-${{ github.run_id }}
          path: |
            app/build/reports/lint-results*.html
            app/build/reports/lint-results*.xml
            app/build/reports/ktlint/
            app/build/reports/detekt/
            quality-reports/
          retention-days: 30

      - name: Upload SARIF to GitHub Security
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: app/build/reports/detekt/detekt.sarif
        continue-on-error: true

      - name: Annotate lint issues
        if: always()
        uses: yutailang0119/action-android-lint@v4
        with:
          report-path: app/build/reports/lint-results-debug.xml
        continue-on-error: true

  security-analysis:
    runs-on: ubuntu-latest
    timeout-minutes: 25
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v3
        with:
          gradle-version: wrapper
          cache-read-only: true

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        id: dependency-check
        with:
          project: 'Project-Anti'
          path: '.'
          format: 'ALL'
          out: 'dependency-check-reports'
          args: >
            --enableExperimental
            --scan **/*.gradle
            --scan **/*.gradle.kts
            --nvdApiKey ${{ secrets.NVD_API_KEY }}

      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Android security analysis
        run: |
          mkdir -p security-reports
          
          echo "# 🔒 Security Analysis Report" > security-reports/security-summary.md
          echo "" >> security-reports/security-summary.md
          
          # Check AndroidManifest.xml for security issues
          if [ -f "app/src/main/AndroidManifest.xml" ]; then
            echo "## Android Manifest Security Check" >> security-reports/security-summary.md
            
            # Check for dangerous permissions
            dangerous_perms=$(grep -c "android.permission.CAMERA\|android.permission.RECORD_AUDIO\|android.permission.ACCESS_FINE_LOCATION\|android.permission.READ_CONTACTS\|android.permission.READ_CALENDAR\|android.permission.READ_EXTERNAL_STORAGE\|android.permission.WRITE_EXTERNAL_STORAGE" app/src/main/AndroidManifest.xml || echo "0")
            echo "- **Dangerous permissions**: $dangerous_perms" >> security-reports/security-summary.md
            
            # Check for exported components
            exported_components=$(grep -c 'android:exported="true"' app/src/main/AndroidManifest.xml || echo "0")
            echo "- **Exported components**: $exported_components" >> security-reports/security-summary.md
            
            # Check for debug settings
            debug_enabled=$(grep -c 'android:debuggable="true"' app/src/main/AndroidManifest.xml || echo "0")
            echo "- **Debug enabled**: $debug_enabled" >> security-reports/security-summary.md
            
            # Check for network security config
            network_config=$(grep -c 'android:networkSecurityConfig' app/src/main/AndroidManifest.xml || echo "0")
            echo "- **Network security config**: $network_config" >> security-reports/security-summary.md
            
            echo "" >> security-reports/security-summary.md
          fi
          
          # Check for hardcoded secrets in code
          echo "## Code Security Issues" >> security-reports/security-summary.md
          
          # Look for potential API keys or secrets
          secret_patterns=$(grep -r -i "api_key\|secret\|password\|token" app/src/main --include="*.kt" --include="*.java" | wc -l || echo "0")
          echo "- **Potential hardcoded secrets**: $secret_patterns" >> security-reports/security-summary.md
          
          # Check for HTTP URLs (should use HTTPS)
          http_urls=$(grep -r "http://" app/src/main --include="*.kt" --include="*.java" --include="*.xml" | wc -l || echo "0")
          echo "- **HTTP URLs found**: $http_urls" >> security-reports/security-summary.md
          
          echo "" >> security-reports/security-summary.md
          echo "## 📋 Recommendations" >> security-reports/security-summary.md
          echo "- Review all security scan results in the uploaded artifacts" >> security-reports/security-summary.md
          echo "- Address any high or critical severity vulnerabilities" >> security-reports/security-summary.md
          echo "- Ensure no secrets are hardcoded in source code" >> security-reports/security-summary.md
          echo "- Use HTTPS for all network communications" >> security-reports/security-summary.md
          echo "- Review Android permissions and ensure they are necessary" >> security-reports/security-summary.md

      - name: Upload security analysis results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-analysis-reports-${{ github.run_id }}
          path: |
            dependency-check-reports/
            security-reports/
          retention-days: 30

      - name: Upload SARIF to GitHub Security
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: dependency-check-reports/dependency-check-report.sarif
        continue-on-error: true

  test-coverage-analysis:
    runs-on: ubuntu-latest
    timeout-minutes: 25
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v3
        with:
          gradle-version: wrapper
          cache-read-only: true

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Run tests with coverage
        run: |
          ./gradlew testDebugUnitTest jacocoTestReport --stacktrace

      - name: Generate coverage report
        run: |
          mkdir -p coverage-reports
          
          echo "# 📊 Test Coverage Report" > coverage-reports/coverage-summary.md
          echo "" >> coverage-reports/coverage-summary.md
          
          if [ -f "app/build/reports/jacoco/jacocoTestReport/html/index.html" ]; then
            # Extract coverage percentage
            coverage=$(grep -o 'Total[^%]*%' app/build/reports/jacoco/jacocoTestReport/html/index.html | head -1 | grep -o '[0-9]*%' || echo "N/A")
            
            echo "## Overall Coverage" >> coverage-reports/coverage-summary.md
            echo "**Total Coverage: ${coverage}**" >> coverage-reports/coverage-summary.md
            echo "" >> coverage-reports/coverage-summary.md
            
            # Coverage thresholds
            coverage_num=$(echo "$coverage" | sed 's/%//')
            if [ "$coverage_num" -ge 80 ]; then
              echo "✅ **Status**: Excellent coverage (≥80%)" >> coverage-reports/coverage-summary.md
            elif [ "$coverage_num" -ge 60 ]; then
              echo "⚠️ **Status**: Good coverage (≥60%)" >> coverage-reports/coverage-summary.md
            elif [ "$coverage_num" -ge 40 ]; then
              echo "⚠️ **Status**: Fair coverage (≥40%)" >> coverage-reports/coverage-summary.md
            else
              echo "❌ **Status**: Low coverage (<40%)" >> coverage-reports/coverage-summary.md
            fi
            
            echo "" >> coverage-reports/coverage-summary.md
            echo "## 📋 Detailed Report" >> coverage-reports/coverage-summary.md
            echo "Check the uploaded artifacts for detailed coverage analysis." >> coverage-reports/coverage-summary.md
          else
            echo "❓ **Status**: No coverage report generated" >> coverage-reports/coverage-summary.md
          fi

      - name: Upload coverage reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-coverage-reports-${{ github.run_id }}
          path: |
            app/build/reports/jacoco/
            coverage-reports/
          retention-days: 30

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: app/build/reports/jacoco/jacocoTestReport/xml/index.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  quality-gate:
    runs-on: ubuntu-latest
    needs: [code-quality-analysis, security-analysis, test-coverage-analysis]
    if: always()
    
    steps:
      - name: Download all quality reports
        uses: actions/download-artifact@v4
        with:
          path: all-quality-reports
          pattern: "*reports*"

      - name: Generate comprehensive quality report
        run: |
          echo "# 🏆 Quality Assurance Summary" > quality-gate-summary.md
          echo "" >> quality-gate-summary.md
          
          echo "## Analysis Results" >> quality-gate-summary.md
          echo "| Analysis Type | Status |" >> quality-gate-summary.md
          echo "|---------------|--------|" >> quality-gate-summary.md
          echo "| Code Quality | ${{ needs.code-quality-analysis.result }} |" >> quality-gate-summary.md
          echo "| Security Analysis | ${{ needs.security-analysis.result }} |" >> quality-gate-summary.md
          echo "| Test Coverage | ${{ needs.test-coverage-analysis.result }} |" >> quality-gate-summary.md
          echo "" >> quality-gate-summary.md
          
          # Overall quality gate status
          if [[ "${{ needs.code-quality-analysis.result }}" == "success" && 
                "${{ needs.security-analysis.result }}" == "success" && 
                "${{ needs.test-coverage-analysis.result }}" == "success" ]]; then
            echo "## ✅ Quality Gate: PASSED" >> quality-gate-summary.md
            echo "" >> quality-gate-summary.md
            echo "All quality checks have passed successfully!" >> quality-gate-summary.md
            echo "- Code quality standards met" >> quality-gate-summary.md
            echo "- No critical security issues found" >> quality-gate-summary.md
            echo "- Test coverage analysis completed" >> quality-gate-summary.md
          else
            echo "## ❌ Quality Gate: FAILED" >> quality-gate-summary.md
            echo "" >> quality-gate-summary.md
            echo "One or more quality checks have failed:" >> quality-gate-summary.md
            
            if [[ "${{ needs.code-quality-analysis.result }}" != "success" ]]; then
              echo "- ❌ Code quality issues detected" >> quality-gate-summary.md
            fi
            
            if [[ "${{ needs.security-analysis.result }}" != "success" ]]; then
              echo "- ❌ Security vulnerabilities found" >> quality-gate-summary.md
            fi
            
            if [[ "${{ needs.test-coverage-analysis.result }}" != "success" ]]; then
              echo "- ❌ Test coverage analysis failed" >> quality-gate-summary.md
            fi
          fi
          
          echo "" >> quality-gate-summary.md
          echo "## 📊 Detailed Reports" >> quality-gate-summary.md
          echo "Individual analysis reports are available in the workflow artifacts:" >> quality-gate-summary.md
          echo "" >> quality-gate-summary.md
          
          # List available reports
          find all-quality-reports -name "*.md" -type f | while read file; do
            echo "- $(basename "$file")" >> quality-gate-summary.md
          done

      - name: Upload quality gate summary
        uses: actions/upload-artifact@v4
        with:
          name: quality-gate-summary-${{ github.run_id }}
          path: |
            quality-gate-summary.md
            all-quality-reports/
          retention-days: 30

      - name: Comment quality summary on PR
        if: github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          path: quality-gate-summary.md
          header: quality-gate

      - name: Set quality gate status
        run: |
          if [[ "${{ needs.code-quality-analysis.result }}" == "success" && 
                "${{ needs.security-analysis.result }}" == "success" && 
                "${{ needs.test-coverage-analysis.result }}" == "success" ]]; then
            echo "::notice::Quality gate passed - all checks successful"
          else
            echo "::error::Quality gate failed - check individual analysis results"
            exit 1
          fi