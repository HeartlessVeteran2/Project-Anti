name: Auto Merge PRs

on:
  pull_request_target:
    types:
      - opened
      - synchronize
      - reopened
      - labeled
      - unlabeled
  check_suite:
    types:
      - completed
  status: {}
  workflow_run:
    workflows: ["Android CI", "Continuous Integration", "Code Quality"]
    types:
      - completed

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.event.workflow_run.pull_requests[0].number }}
  cancel-in-progress: false

permissions:
  contents: write
  pull-requests: write
  checks: read

jobs:
  auto-merge:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: >
      (github.actor == 'dependabot[bot]' || 
       contains(github.event.pull_request.labels.*.name, 'auto-merge') ||
       (github.event.workflow_run && github.event.workflow_run.conclusion == 'success')) &&
      (github.event.pull_request.draft == false || github.event.pull_request == null)
    
    steps:
      - name: Get PR information
        id: pr-info
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            let pr_number;
            let pr_data;

            if (context.payload.pull_request) {
              pr_number = context.payload.pull_request.number;
              pr_data = context.payload.pull_request;
            } else if (context.payload.workflow_run && context.payload.workflow_run.pull_requests.length > 0) {
              // For workflow_run events, get PR from the workflow run
              pr_number = context.payload.workflow_run.pull_requests[0].number;
              const { data } = await github.rest.pulls.get({
                owner,
                repo,
                pull_number: pr_number
              });
              pr_data = data;
            } else {
              console.log('No PR found for this event');
              return;
            }

            if (!pr_number) {
              console.log('No PR number found');
              return;
            }

            console.log(`Processing PR #${pr_number}`);
            core.setOutput('pr_number', pr_number);
            core.setOutput('pr_head_ref', pr_data.head.ref);
            core.setOutput('pr_head_sha', pr_data.head.sha);
            core.setOutput('pr_author', pr_data.user.login);
            core.setOutput('pr_title', pr_data.title);

            // Check if PR has auto-merge label or is from dependabot
            const hasAutoMergeLabel = pr_data.labels.some(label => label.name === 'auto-merge');
            const isDependabot = pr_data.user.login === 'dependabot[bot]';
            const hasDoNotMergeLabel = pr_data.labels.some(label => label.name === 'do not merge' || label.name === 'work in progress');
            
            core.setOutput('should_auto_merge', (hasAutoMergeLabel || isDependabot) && !hasDoNotMergeLabel);
            
            console.log(`Auto-merge eligible: ${(hasAutoMergeLabel || isDependabot) && !hasDoNotMergeLabel}`);
            console.log(`Has auto-merge label: ${hasAutoMergeLabel}`);
            console.log(`Is dependabot: ${isDependabot}`);
            console.log(`Has do-not-merge label: ${hasDoNotMergeLabel}`);

      - name: Check PR status
        id: pr-status
        if: steps.pr-info.outputs.pr_number
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const pr_number = ${{ steps.pr-info.outputs.pr_number }};
            const head_sha = '${{ steps.pr-info.outputs.pr_head_sha }}';

            // Get PR details
            const { data: pr } = await github.rest.pulls.get({
              owner,
              repo,
              pull_number: pr_number
            });

            // Check if PR is mergeable
            if (pr.mergeable === false) {
              console.log('PR has merge conflicts');
              core.setOutput('is_mergeable', false);
              return;
            }

            // Get all checks for the head SHA
            const { data: checks } = await github.rest.checks.listForRef({
              owner,
              repo,
              ref: head_sha
            });

            // Get all status checks for the head SHA
            const { data: statuses } = await github.rest.repos.listCommitStatusesForRef({
              owner,
              repo,
              ref: head_sha
            });

            // Check if all required checks pass
            const failedChecks = checks.check_runs.filter(check => 
              check.conclusion === 'failure' || check.conclusion === 'cancelled'
            );

            const failedStatuses = statuses.filter(status => 
              status.state === 'failure' || status.state === 'error'
            );

            const pendingChecks = checks.check_runs.filter(check => 
              check.status === 'in_progress' || check.status === 'queued'
            );

            const pendingStatuses = statuses.filter(status => 
              status.state === 'pending'
            );

            console.log(`Failed checks: ${failedChecks.length}`);
            console.log(`Failed statuses: ${failedStatuses.length}`);
            console.log(`Pending checks: ${pendingChecks.length}`);
            console.log(`Pending statuses: ${pendingStatuses.length}`);

            const allChecksPassed = failedChecks.length === 0 && failedStatuses.length === 0;
            const hasPendingChecks = pendingChecks.length > 0 || pendingStatuses.length > 0;

            core.setOutput('all_checks_passed', allChecksPassed);
            core.setOutput('has_pending_checks', hasPendingChecks);
            core.setOutput('is_mergeable', pr.mergeable !== false);

            // Get required status checks
            try {
              const { data: branch } = await github.rest.repos.getBranch({
                owner,
                repo,
                branch: pr.base.ref
              });
              
              const requiredChecks = branch.protection?.required_status_checks?.contexts || [];
              console.log(`Required checks: ${requiredChecks.join(', ')}`);
              
              // Check if all required checks are present and passing
              const requiredChecksPassed = requiredChecks.every(requiredCheck => {
                const check = checks.check_runs.find(c => c.name === requiredCheck);
                const status = statuses.find(s => s.context === requiredCheck);
                
                return (check && check.conclusion === 'success') || 
                       (status && status.state === 'success');
              });
              
              core.setOutput('required_checks_passed', requiredChecksPassed);
            } catch (error) {
              console.log('Could not get branch protection rules, assuming no required checks');
              core.setOutput('required_checks_passed', true);
            }

      - name: Wait for pending checks
        if: steps.pr-status.outputs.has_pending_checks == 'true' && steps.pr-info.outputs.should_auto_merge == 'true'
        run: |
          echo "Checks are still pending. Waiting for completion..."
          sleep 30

      - name: Merge PR
        if: >
          steps.pr-info.outputs.should_auto_merge == 'true' &&
          steps.pr-status.outputs.all_checks_passed == 'true' &&
          steps.pr-status.outputs.is_mergeable == 'true' &&
          steps.pr-status.outputs.required_checks_passed == 'true'
        uses: pascalgn/automerge-action@v0.16.4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          MERGE_LABELS: "auto-merge,dependencies,!work in progress,!do not merge"
          MERGE_METHOD: "squash"
          MERGE_COMMIT_MESSAGE: "pull-request-title-and-description"
          MERGE_RETRIES: "6"
          MERGE_RETRY_SLEEP: "10000"
          UPDATE_LABELS: "auto-merge,dependencies"
          UPDATE_METHOD: "merge"
          MERGE_FILTER_AUTHOR: "dependabot[bot]"
          LOG: "INFO"

      - name: Comment on merge failure
        if: >
          steps.pr-info.outputs.should_auto_merge == 'true' &&
          (steps.pr-status.outputs.all_checks_passed != 'true' ||
           steps.pr-status.outputs.is_mergeable != 'true' ||
           steps.pr-status.outputs.required_checks_passed != 'true')
        uses: actions/github-script@v7
        with:
          script: |
            const pr_number = ${{ steps.pr-info.outputs.pr_number }};
            const allChecksPassed = '${{ steps.pr-status.outputs.all_checks_passed }}' === 'true';
            const isMergeable = '${{ steps.pr-status.outputs.is_mergeable }}' === 'true';
            const requiredChecksPassed = '${{ steps.pr-status.outputs.required_checks_passed }}' === 'true';

            let reasons = [];
            if (!allChecksPassed) reasons.push('❌ Some checks failed');
            if (!isMergeable) reasons.push('⚠️ PR has merge conflicts');
            if (!requiredChecksPassed) reasons.push('🔒 Required status checks not satisfied');

            const comment = `🤖 **Auto-merge blocked**

            This PR is labeled for auto-merge but cannot be merged automatically:

            ${reasons.map(reason => `- ${reason}`).join('\n')}

            Please resolve these issues and the PR will be automatically merged once all checks pass.`;

            github.rest.issues.createComment({
              issue_number: pr_number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Update merge status
        if: steps.pr-info.outputs.pr_number
        uses: actions/github-script@v7
        with:
          script: |
            const pr_number = ${{ steps.pr-info.outputs.pr_number }};
            const shouldAutoMerge = '${{ steps.pr-info.outputs.should_auto_merge }}' === 'true';
            const allChecksPassed = '${{ steps.pr-status.outputs.all_checks_passed }}' === 'true';
            const isMergeable = '${{ steps.pr-status.outputs.is_mergeable }}' === 'true';

            console.log(`PR #${pr_number} auto-merge summary:`);
            console.log(`- Should auto-merge: ${shouldAutoMerge}`);
            console.log(`- All checks passed: ${allChecksPassed}`);
            console.log(`- Is mergeable: ${isMergeable}`);

            if (shouldAutoMerge && allChecksPassed && isMergeable) {
              console.log('✅ PR should be merged automatically');
            } else {
              console.log('❌ PR cannot be merged automatically');
            }